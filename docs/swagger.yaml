basePath: /api/v1/gcw/resources
definitions:
  dto.AuthResponseDTO:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponseDTO'
    type: object
  dto.CreateNewsLetterDTO:
    properties:
      base_image:
        type: string
      id_admin:
        type: integer
      news_letter:
        type: string
      title:
        type: string
    required:
    - id_admin
    - news_letter
    - title
    type: object
  dto.Event:
    properties:
      name:
        type: string
      payment_status:
        type: string
      status:
        type: string
      team:
        $ref: '#/definitions/dto.Team'
      ticket:
        $ref: '#/definitions/dto.Ticket'
    type: object
  dto.HackatonStageStatus:
    properties:
      final:
        type: boolean
      stage_1:
        type: boolean
      stage_2:
        type: boolean
    type: object
  dto.Member:
    properties:
      email:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
  dto.RefreshTokenDTO:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RegistraionTeamResponse:
    properties:
      bukti_pembayaran:
        type: string
      created_at:
        type: string
      id_team:
        type: integer
      leader:
        $ref: '#/definitions/dto.Member'
      member:
        items:
          $ref: '#/definitions/dto.Member'
        type: array
      supervisor:
        type: string
      supervisor_nidn:
        type: string
      team_name:
        type: string
      updated_at:
        type: string
    required:
    - supervisor
    - supervisor_nidn
    - team_name
    type: object
  dto.RegistrationCPResponse:
    properties:
      bukti_pembayaran:
        type: string
      createdAt:
        type: string
      domjudge_password:
        type: string
      domjudge_username:
        type: string
      id_cp_team:
        type: integer
      id_team:
        type: integer
      join_code:
        type: string
      stage:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  dto.RegistrationCPTeamRequest:
    properties:
      bukti_pembayaran:
        type: string
      supervisor:
        type: string
      supervisor_nidn:
        type: string
      team_name:
        type: string
    required:
    - supervisor
    - supervisor_nidn
    - team_name
    type: object
  dto.RegistrationCPTeamResponse:
    properties:
      cpteam:
        $ref: '#/definitions/dto.RegistrationCPResponse'
      team:
        $ref: '#/definitions/dto.RegistraionTeamResponse'
    type: object
  dto.RegistrationHackathonResponse:
    properties:
      bukti_pembayaran:
        type: string
      created_at:
        type: string
      id_HackathonTeam:
        type: integer
      id_team:
        type: integer
      join_code:
        type: string
      stage:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  dto.RegistrationHackathonTeamRequest:
    properties:
      bukti_pembayaran:
        type: string
      supervisor:
        type: string
      supervisor_nidn:
        type: string
      team_name:
        type: string
    required:
    - supervisor
    - supervisor_nidn
    - team_name
    type: object
  dto.RegistrationHackathonTeamResponse:
    properties:
      hackathonTeam:
        $ref: '#/definitions/dto.RegistrationHackathonResponse'
      team:
        $ref: '#/definitions/dto.RegistraionTeamResponse'
    type: object
  dto.RequestHackathon:
    properties:
      link_drive:
        type: string
    type: object
  dto.ResponseEvents:
    properties:
      events:
        items:
          $ref: '#/definitions/dto.Event'
        type: array
      id_team:
        type: string
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.Team:
    properties:
      members:
        items:
          $ref: '#/definitions/dto.Member'
        type: array
      team_name:
        type: string
    type: object
  dto.Ticket:
    properties:
      issued_at:
        type: string
      qr_code_url:
        type: string
      ticket_id:
        type: string
      type:
        type: string
      valid_until:
        type: string
    type: object
  dto.UpdateNewsLetterDTO:
    properties:
      base_image:
        type: string
      news_letter:
        type: string
      title:
        type: string
    type: object
  dto.UpdateUserProfileDTO:
    properties:
      birth_date:
        type: string
      birth_place:
        type: string
      gender:
        type: string
      institusi:
        type: string
      major:
        type: string
      name:
        type: string
      nim:
        type: string
      phone:
        type: string
      socmed_document:
        type: string
    required:
    - birth_date
    - birth_place
    - gender
    - institusi
    - name
    - nim
    type: object
  dto.User:
    properties:
      degree:
        type: string
      email:
        type: string
      name:
        type: string
      university:
        type: string
    type: object
  dto.UserResponseDTO:
    properties:
      birth_date:
        type: string
      data_has_verified:
        type: boolean
      dokumen_filename:
        type: string
      email:
        type: string
      id:
        type: integer
      institusi:
        type: string
      major:
        type: string
      name:
        type: string
      nim:
        type: string
      phone:
        type: string
      profile_has_updated:
        type: boolean
      profile_picture:
        type: string
      role:
        type: string
      socmed_document:
        type: string
    type: object
  dto.ValidateGoogleIdTokenDTO:
    properties:
      google_id_token:
        type: string
    required:
    - google_id_token
    type: object
  entity.HackathonTeam:
    properties:
      createdAt:
        type: string
      githubProjectUrl:
        type: string
      id_HackathonTeam:
        type: integer
      idteam:
        type: integer
      isDeleted:
        type: boolean
      pitchDeckUrl:
        type: string
      proposalUrl:
        type: string
      stage:
        type: string
      status:
        type: string
      team:
        $ref: '#/definitions/entity.Team'
      updatedAt:
        type: string
    type: object
  entity.NewsLetter:
    properties:
      base_image:
        type: string
      created_at:
        type: string
      id_admin:
        type: integer
      id_news_letter:
        type: integer
      news_letter:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  entity.Team:
    properties:
      createdAt:
        type: string
      event:
        type: string
      id_LeadTeam:
        type: integer
      id_Team:
        type: integer
      joinCode:
        type: string
      komitmenFee:
        type: string
      supervisor:
        type: string
      supervisorNIDN:
        type: string
      teamName:
        type: string
      updatedAt:
        type: string
    type: object
  helper.Response:
    properties:
      data: {}
      errors: {}
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is a sample server for GCW API.
  title: GCW API
  version: "1.0"
paths:
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh Token
      parameters:
      - description: Refresh Token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponseDTO'
              type: object
      summary: Refresh Token
      tags:
      - Auth
  /auth/validate-google-id-token:
    post:
      consumes:
      - application/json
      description: Validate Google ID Token (Login)
      parameters:
      - description: Google ID Token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ValidateGoogleIdTokenDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuthResponseDTO'
              type: object
      summary: Validate Google ID Token
      tags:
      - Auth
  /dashboard/{acara}/{count}/{page}:
    get:
      consumes:
      - application/json
      description: Retrieve all dashboard data based on the specified event type (seminar,
        hackaton, cp).
      parameters:
      - description: Event type (seminar, hackaton, cp)
        in: path
        name: acara
        required: true
        type: string
      - description: Number of items per page
        in: path
        name: count
        required: true
        type: integer
      - description: Page number
        in: path
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                message:
                  type: string
              type: object
      summary: Get All Dashboard
      tags:
      - Dashboard
  /dashboard/{acara}/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific dashboard event based on the event type and ID.
      parameters:
      - description: Event type (seminar, hackaton, cp)
        in: path
        name: acara
        required: true
        type: string
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                message:
                  type: string
              type: object
      summary: Delete Dashboard Event
      tags:
      - Dashboard
    put:
      consumes:
      - application/json
      description: Update a specific dashboard event based on the event type and ID.
      parameters:
      - description: Event type (seminar, hackaton, cp)
        in: path
        name: acara
        required: true
        type: string
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Event data to update
        in: body
        name: request
        required: true
        schema: {}
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                message:
                  type: string
              type: object
      summary: Update Dashboard Event
      tags:
      - Dashboard
  /dashboard/events/{id_user}:
    get:
      consumes:
      - application/json
      description: Retrieve all events associated with a specific user.
      parameters:
      - description: User ID
        in: path
        name: id_user
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ResponseEvents'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                message:
                  type: string
              type: object
      summary: Get User Events
      tags:
      - Dashboard
  /hackathon/{join_code}/{stage}:
    post:
      consumes:
      - application/json
      description: Submit a hackathon entry
      parameters:
      - description: Hackathon Stage
        in: path
        name: stage
        required: true
        type: string
      - description: Hackathon Join Code
        in: path
        name: join_code
        required: true
        type: string
      - description: Hackathon Submission Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RequestHackathon'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.HackathonTeam'
              type: object
        "400":
          description: Invalid input
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Submission failed
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Submit Hackathon
      tags:
      - Hackathon
  /hackathon/{join_code}/status:
    get:
      consumes:
      - application/json
      description: Get the status of a hackathon stage
      parameters:
      - description: Hackathon Join Code
        in: path
        name: join_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.HackatonStageStatus'
              type: object
        "400":
          description: Invalid join code
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Hackathon Stage Status
      tags:
      - Hackathon
  /newsletter:
    post:
      consumes:
      - application/json
      description: Create a new newsletter
      parameters:
      - description: Create Newsletter
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateNewsLetterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.NewsLetter'
              type: object
        "400":
          description: Invalid input
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Create failed
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create Newsletter
      tags:
      - Newsletter
  /newsletter/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a newsletter by ID
      parameters:
      - description: Newsletter ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Newsletter deleted
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid ID
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Delete failed
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete Newsletter
      tags:
      - Newsletter
    get:
      consumes:
      - application/json
      description: Get a newsletter by ID
      parameters:
      - description: Newsletter ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.NewsLetter'
              type: object
        "400":
          description: Invalid ID
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Not found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Newsletter
      tags:
      - Newsletter
    put:
      consumes:
      - application/json
      description: Update a newsletter by ID
      parameters:
      - description: Newsletter ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Newsletter
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateNewsLetterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.NewsLetter'
              type: object
        "400":
          description: Invalid input or ID
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Update failed
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update Newsletter
      tags:
      - Newsletter
  /profile/my:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponseDTO'
              type: object
      summary: Get My Profile Data
      tags:
      - Profile
    post:
      consumes:
      - application/json
      parameters:
      - description: Update User Profile
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserProfileDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponseDTO'
              type: object
      summary: Update My Profile Data
      tags:
      - Profile
  /team/registration/cp:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register CP Team
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegistrationCPTeamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegistrationCPTeamResponse'
              type: object
      summary: Register CP Team
      tags:
      - Team Registration
  /team/registration/find/{join_code}:
    get:
      parameters:
      - description: Join Code
        in: query
        name: join_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegistraionTeamResponse'
              type: object
      summary: Find Team
      tags:
      - Team Registration
  /team/registration/hackathon:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register Hackathon Team
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegistrationHackathonTeamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegistrationHackathonTeamResponse'
              type: object
      summary: Register Hackathon Team
      tags:
      - Team Registration
  /team/registration/join/{join_code}:
    post:
      parameters:
      - description: Join Code
        in: query
        name: join_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegistraionTeamResponse'
              type: object
      summary: Join Team
      tags:
      - Team Registration
swagger: "2.0"
